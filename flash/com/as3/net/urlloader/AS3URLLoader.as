package com.as3.net.urlloader{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.display.Loader;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.clearTimeout;	import flash.utils.setTimeout;	import flash.events.IEventDispatcher;	import flash.net.URLLoaderDataFormat;	import flash.net.sendToURL;	public class AS3URLLoader	{		//数据调度管理方法		private var _handler_fun:Function;		//Loader对象		private var _loader_url:*;		//超时标志		private var _isLoaded_boo:Boolean=false;		//超时计时器		private var _setTimeoutId_num:Number;		private var _object:Object;		public function AS3URLLoader()		{			_object=new Object;		}		//超时时间，回调，url，format，format＝media：支持loader操作		public function load(time:Number,handler:Function,url:String,df:String="text")		{			try			{				_handler_fun=handler;				var dispatcher:IEventDispatcher;				if (df=="media") {					_loader_url=new Loader();					dispatcher = _loader_url.contentLoaderInfo;				} else {					_loader_url=new URLLoader();					dispatcher = _loader_url;					switch (df)					{						case "binary" :							_loader_url.dataFormat=URLLoaderDataFormat.BINARY;							break;						case "var" :							_loader_url.dataFormat=URLLoaderDataFormat.VARIABLES;							break;						case "text":						default:							_loader_url.dataFormat=URLLoaderDataFormat.TEXT;							break;					}				}				dispatcher.addEventListener(Event.COMPLETE,completeHandler);				dispatcher.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);				/*dispatcher.addEventListener(Event.OPEN, openHandler);				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);*/				_loader_url.load(new URLRequest(url));				_setTimeoutId_num=setTimeout(checkTime,time*1000);			}			catch (e:*)			{				trace("urlloader error");				trace(e);			}		}		//发送数据.如统计之类的		public function send(url:String):void		{			sendToURL(new URLRequest(url));		}		//加载成功		private function completeHandler(event:Event):void		{			_isLoaded_boo=true;			clearTimeout(_setTimeoutId_num);			if(this._handler_fun!=null){				if (_loader_url is Loader)					this._handler_fun({info:"success",									  data:_loader_url.content,									  target:this,									  loaderinfo:event.target,									  obj:this._object});				else					this._handler_fun({info:"success",									  data:event.target.data,									  target:this,									  loaderinfo:event.target,									  obj:this._object});			}		}		//加载错误		private function ioErrorHandler(event:IOErrorEvent):void		{			trace("urlloader ioerror");			_isLoaded_boo=false;			clearTimeout(_setTimeoutId_num);			if(this._handler_fun!=null){this._handler_fun({info:"error",err:event,obj:this._object});}		}		//检查超时		private function checkTime():void		{			trace("urlloader timeout");			if (! _isLoaded_boo)			{				_loader_url.removeEventListener(Event.COMPLETE,completeHandler);				_loader_url.removeEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);				if(this._handler_fun!=null){this._handler_fun({info:"timeout",obj:this._object});}			}		}		public function setobj(key:*,val:*):void		{			_object[key]=val;		}		public function getobj(key:*):*		{			return _object[key];		}	}}