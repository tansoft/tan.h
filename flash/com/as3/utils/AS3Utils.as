package com.as3.utils{    import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.external.ExternalInterface;	import fl.transitions.Tween;	import fl.transitions.easing.*;	public class AS3Utils	{		//格式化时间格式.参数为秒数		public static function fomatTime(t:Number):String		{			var minute_num:Number=t/60;			var minute_str:String=String(Math.floor(minute_num));			var second_str:String=String(Math.floor(t%60));			if (minute_str.length==1)			{				minute_str="0"+minute_str;			}			if (second_str.length==1)			{				second_str="0"+second_str;			}			return minute_str + ":" + second_str;		}		//页面提示		public static function showMessage(msg_str:String):void		{			var msg:String="javascript:alert('"+msg_str+"');";			navigateToURL(new URLRequest(msg),"_self");		}		//画矢量图		public static function drawRect(obj:*,_x,_y,w,h,color:Number,alp:Number):void		{			//obj 需要画矢量图的显示对象。如Sprite, MovieClip			//这个方法不能代替创建显示元件，如Sprite MovieClip   Sprite要用Sprite			//这个方法只是在已创建的元件最下层画矢量图			trace("obj = " + obj);			obj.graphics.beginFill(color,alp);			obj.graphics.drawRect(_x,_y,w,h);			obj.graphics.endFill();		}		//画矢量圆		public static function drawCircle(obj:*,x:Number,y:Number,radius:Number,color:Number,alp:Number):void		{			obj.graphics.beginFill(color,alp);			obj.graphics.drawCircle(x,y,radius);			obj.graphics.endFill();		}		//控制小数点位数		public static function numberFormat(num:Number,unit:uint):Number		{			var de_str:String="1";			var de_uint:uint;			for(var i=0;i<unit;i++)			{				de_str+="0";			}			de_uint=uint(de_str);			return Math.round (num*de_uint)/de_uint;		}	   //无屏蔽点击        /*public static function openUrl(url:String,window:String="_blank",features:String=""):void		{			//navigateToURL(new URLRequest(url), window);			var $req=new URLRequest(url);			var $window=window;			if (! ExternalInterface.available)			{				return navigateToURL($req,$window);			}			if (/safari|opera/i.test(ExternalInterface.call('function(){return navigator.userAgent}') || 'opera'))			{				navigateToURL($req,$window);			}			else			{				//ExternalInterface.call("alert("+toURLString($req)+")")				try				{					ExternalInterface.call("function(){window.open('" + url + "','" + $window + "');}");				}				catch (e:Error)				{					ExternalInterface.call("alert(" + e.message + ")");				}			}		}*/        public static function openUrl(url:String, window:String = "_blank", features:String = "") : void        {        	var WINDOW_OPEN_FUNCTION:String="window.open";            var browserName:String = getBrowserName();            if (browserName.toLowerCase() == "firefox" || browserName.toLowerCase() == "ie")            {           		try                {                	ExternalInterface.call(WINDOW_OPEN_FUNCTION, url, window, features);                	return;                   }                catch (e:Error) {}            }            // catch, if (browserName == "Safari" || browserName == "Opera") and else            try            {            	navigateToURL(new URLRequest(url), window);            }            catch (e:Error) {}		}                            public static function getBrowserName() : String        {        	var browser:String="";        	var browserAgent:String;        	try        	{        		browserAgent = ExternalInterface.call("function getBrowser(){return navigator.userAgent;}");        	}        	catch (e:Error) {}        	if (browserAgent != null) {        		if (browserAgent.indexOf("Firefox") >= 0) browser="Firefox";        		else if (browserAgent.indexOf("Safari") >= 0) browser="Safari";        		else if (browserAgent.indexOf("MSIE") >= 0) browser="MSIE";        		else if (browserAgent.indexOf("Opera") >= 0) browser="Opera";        	}        	return browser;        }		//按比例缩放		//不论要设置的对象比源对象大还是小都会进行设置。如果对象比源小就不设置侧需另加代码		public static function prorata(obj:Object, metaWidth:Number, metaHeight:Number):void		{//要设置的对象尺寸比例相对源对象尺寸比例要宽			if (obj.width/obj.height>metaWidth/metaHeight)			{				obj.height = metaWidth/obj.width*obj.height;				obj.width = metaWidth;			}			else			{//要设置的对象尺寸比例相对源对象尺寸比例要窄				if (obj.width/obj.height<metaWidth/metaHeight)				{					obj.width = metaHeight/obj.height*obj.width;					obj.height = metaHeight;				}				else				{					obj.width = metaWidth;					obj.height = metaHeight;				}////要设置的对象尺寸比例相对源对象尺寸比例相同			}		}		//设置居中		public static function setCenter(obj:Object, reObj:Object):void		{			obj.x = reObj.x+(reObj.width-obj.width)/2;			obj.y = reObj.y+(reObj.height-obj.height)/2;		}		//带动作的居中，按比例缩放		public static function setCPForTween(time:Number, obj:Object, reObj:Object, flag:String):void		{			var metaWidth:Number = reObj.width;			var metaHeight:Number = reObj.height;			var _w:Number;			var _h:Number;			var __x:Number;			var __y:Number;			flag = (flag == null) ? "cp" : flag;			//计算obj应该放大或缩小的尺寸			//要设置的对象尺寸比例相对源对象尺寸比例要宽			if (obj.width/obj.height>metaWidth/metaHeight)			{				_h = metaWidth/obj.width*obj.height;				_w = metaWidth;			}			else			{//要设置的对象尺寸比例相对源对象尺寸比例要窄				if (obj.width/obj.height<metaWidth/metaHeight)				{					_w = metaHeight/obj.height*obj.width;					_h = metaHeight;				}				else				{					_w = metaWidth;					_h = metaHeight;				}////要设置的对象尺寸比例相对源对象尺寸比例相同			}			__x = reObj.x+(reObj.width-_w)/2;//计算对象应该的位置			__y = reObj.y+(reObj.height-_h)/2;						var myTwe			switch (flag)			{				case "CP" :					//设置居中//是先居中					__x = reObj.x+(reObj.width-_w)/2;					__y = reObj.y+(reObj.height-_h)/2;					myTwe = new Tween(obj, "x", Regular.easeOut, obj.x, __x, time, true);					new Tween(obj, "y", Regular.easeOut, obj.y, __y, time, true);					myTwe.onMotionFinished = function():void 					{//设置缩放						new Tween(obj, "height", Regular.easeOut, obj.height, _h, time, true);						new Tween(obj, "width", Regular.easeOut, obj.width, _w, time, true);					};					break;				case "PC" :					///设置缩放//是先缩放					myTwe = new Tween(obj, "height", Regular.easeOut, obj.height, _h, time, true);					new Tween(obj, "width", Regular.easeOut, obj.width, _w, time, true);					myTwe.onMotionFinished = function():void 					{//设置居中						new Tween(obj, "x", Regular.easeOut, obj.x, __x, time, true);						new Tween(obj, "y", Regular.easeOut, obj.y, __y, time, true);						};					break;				case "AOTime":					//同时进行					new Tween(obj, "height", Regular.easeOut, obj.height, _h, time, true);					new Tween(obj, "width", Regular.easeOut, obj.width, _w, time, true);					new Tween(obj, "x", Regular.easeOut, obj.x, __x, time, true);					new Tween(obj, "y", Regular.easeOut, obj.y, __y, time, true);					break;				case "C" :					//只做居中动作					new Tween(obj, "x", Regular.easeOut, obj.x, __x, time, true);					new Tween(obj, "y", Regular.easeOut, obj.y, __y, time, true);					break;				case "P" :					//只做缩放动作					new Tween(obj, "height", Regular.easeOut, obj.height, _h, time, true);					new Tween(obj, "width", Regular.easeOut, obj.width, _w, time, true);					break;			}		}		//创建ＵＩＤ		public static function createUID():String		{			var uid:String = "";			var ALPHA_CHARS:String = "0123456789abcdef";			var i:int;			var j:int;						for (i = 0; i < 8; i++)			{				uid += ALPHA_CHARS.charAt(Math.round(Math.random() *  15));			}			for (i = 0; i < 3; i++)			{				uid += "-";				for (j = 0; j < 4; j++)				{					uid += ALPHA_CHARS.charAt(Math.round(Math.random() * 15));				}			}						uid += "-";			var time:Number = new Date().getTime();			uid += ("0000000" + time.toString(16).toUpperCase()).substr(-8);			for (i = 0; i < 4; i++)			{				uid += ALPHA_CHARS.charAt(Math.round(Math.random() * 15));			}			return uid;		}			//得到JS上的变量值		public static function getJSVar(vari:String)		{			return ExternalInterface.call("function(){return "+vari+";}",null);		}	}}