package com.as3.utils{	public class AS3JSON {	public  var at = 0;    public  var ch = ' ';	public  var text:String;		public function AS3JSON(){	}		public  function parse(textt:String):Object {		text=textt;        return value();    }		 function value() {            this.white();            switch (this.ch) {                case '{':                    return this.object();                case '[':                    return this.array();                case '"':                    return this.string();                case '-':                    return this.number();                default:                    return this.ch >= '0' && this.ch <= '9' ? this.number() : this.word();            }    }		 function error(m) {            throw {                name: 'JSONError',                message: m,                at: this.at - 1,                text: this.text            };        }         function next() {            this.ch = this.text.charAt(this.at);            this.at += 1;            return this.ch;        }         function white() {            while (this.ch) {                if (this.ch <= ' ') {                    this.next();                } else if (this.ch == '/') {                    switch (this.next()) {                        case '/':                            while (this.next() && this.ch != '\n' && this.ch != '\r') {}                            break;                        case '*':                            this.next();                            for (;;) {                                if (this.ch) {                                    if (this.ch == '*') {                                        if (this.next() == '/') {                                            next();                                            break;                                        }                                    } else {                                        this.next();                                    }                                } else {                                    error("Unterminated comment");                                }                            }                            break;                        default:                            this.error("Syntax error");                    }                } else {                    break;                }            }        }         function string() {            var i, s = '', t, u;			var outer:Boolean = false;            if (this.ch == '"') {				while (this.next()) {                    if (this.ch == '"') {                        this.next();                        return s;                    } else if (this.ch == '\\') {                        switch (this.next()) {                        case 'b':                            s += '\b';                            break;                        case 'f':                            s += '\f';                            break;                        case 'n':                            s += '\n';                            break;                        case 'r':                            s += '\r';                            break;                        case 't':                            s += '\t';                            break;                        case 'u':                            u = 0;                            for (i = 0; i < 4; i += 1) {                                t = parseInt(this.next(), 16);                                if (!isFinite(t)) {                                    outer = true;									break;                                }                                u = u * 16 + t;                            }							if(outer) {								outer = false;								break;							}                            s += String.fromCharCode(u);                            break;                        default:                            s += this.ch;                        }                    } else {                        s += this.ch;                    }                }            }            this.error("Bad string");        }         function array() {            var a = [];            if (this.ch == '[') {                this.next();                this.white();                if (this.ch == ']') {                    this.next();                    return a;                }                while (this.ch) {                    a.push(this.value());                    this.white();                    if (this.ch == ']') {                        this.next();                        return a;                    } else if (this.ch != ',') {                        break;                    }                    this.next();                    this.white();                }            }            this.error("Bad array");        }         function object() {            var k, o = {};            if (this.ch == '{') {                this.next();                this.white();                if (this.ch == '}') {                    this.next();                    return o;                }                while (this.ch) {                    k = this.string();                    this.white();                    if (this.ch != ':') {                        break;                    }                    this.next();                    o[k] = this.value();                    this.white();                    if (this.ch == '}') {                        this.next();                        return o;                    } else if (this.ch != ',') {                        break;                    }                    this.next();                    this.white();                }            }            this.error("Bad object");        }         function number() {            var n = '', v;            if (this.ch == '-') {                n = '-';                this.next();            }            while (this.ch >= '0' && this.ch <= '9') {                n += this.ch;                this.next();            }            if (this.ch == '.') {                n += '.';                while (this.next() && this.ch >= '0' && this.ch <= '9') {                    n += this.ch;                }            }            v = +n;            if (!isFinite(v)) {                this.error("Bad number");            } else {                return v;            }        }         function word() {            switch (this.ch) {                case 't':                    if (this.next() == 'r' && this.next() == 'u' && this.next() == 'e') {                        this.next();                        return true;                    }                    break;                case 'f':                    if (this.next() == 'a' && this.next() == 'l' && this.next() == 's' &&                            this.next() == 'e') {                        this.next();                        return false;                    }                    break;                case 'n':                    if (this.next() == 'u' && this.next() == 'l' && this.next() == 'l') {                        this.next();                        return null;                    }                    break;            }            this.error("Syntax error");        }	}}