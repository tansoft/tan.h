/*================================================== * @className           wysiwygeditor.as * @version             3.0 * @package             as3 * @author              barrytan<20962493@qq.com> * @copyright           tansoft.net====================================================类说明:类模板====================================================*/package com.as3.components{	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.StageDisplayState;	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.events.Event;	import flash.system.Capabilities;	import flash.utils.clearInterval;	import flash.utils.getTimer;	import flash.system.Security;	import flash.utils.clearInterval;	import flash.utils.setInterval;	import flash.text.TextField;	import flash.text.TextFormat;	import com.as3.net.urlloader.AS3URLLoader;	import com.as3.utils.*;	import flash.ui.Mouse;	import flash.display.Bitmap;	import flash.filters.GlowFilter;	import json.*;	public class wysiwygeditor extends Sprite	{		private var _info:Object;		private var _broder:GlowFilter = new GlowFilter(0x0066FF, 1.0, 8, 8, 2, 2);		public function wysiwygeditor()		{			Security.allowDomain("*");			Security.allowInsecureDomain("*");			this.addEventListener(Event.ADDED_TO_STAGE, onAddStage);		}		private function onAddStage(event : Event) : void		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAddStage);			stage.showDefaultContextMenu = false;			//stage.doubleClickEnabled = true;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			_info = new Object();			_info["curobj"]=null;			_info["curmoveobj"]=null;			_info["pickcolor"]=false;			//readsetting			//if (this.loaderInfo.parameters.skin != null) _skinType=this.loaderInfo.parameters.skin;			//perpare skin			tool_mc.addEventListener(MouseEvent.CLICK, onToolsClickHandler);			tool_mc.addEventListener(Event.CHANGE, onToolsInputHandler);			tool_mc.alpha_mc.text="100";			tool_mc.angle_mc.text="0";			updateFont("宋体",12);			updateColor("000000");			tool_mc.colortable_mc.visible=false;			stage.addEventListener(Event.RESIZE, onResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, onMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMoveHandler);		}		private function saveAllObj():void		{			var ret:Object=new Object();			for(var i:int;i<numChildren-1;i++) {				var obj=getChildAt(i);				var tmpObj:Object=new Object();				tmpObj['type']=_info[obj.name+"type"];				tmpObj['x']=obj.x;				tmpObj['y']=obj.y;				tmpObj['w']=obj.width;				tmpObj['h']=obj.height;				tmpObj['alpha']=obj.alpha;				switch(_info[obj.name+"type"]) {					case "图像":						tmpObj['url']=_info[obj.name+"url"];						tmpObj['angle']=obj.rotation;					break;					case "文本":						tmpObj['fontname']=_info[obj.name+"fontname"];						tmpObj['fontsize']=_info[obj.name+"fontsize"];						tmpObj['color']=_info[obj.name+"color"];					break;					case "矩形":						tmpObj['color']=_info[obj.name+"color"];						tmpObj['angle']=obj.rotation;					break;					default:						trace("not support object:"+obj.name+" type:"+_info[obj.name+"type"]);				}				ret[i]=tmpObj;			}			var str:String = JSON.encode(ret);			trace(str);		}		private function insertUrlObj(url:String):void		{			var loader:AS3URLLoader = new AS3URLLoader();			loader.setobj("url",url);			loader.load(10,urlHandler,url,"media");		}		private function urlHandler(e : *) : void		{			if (e.info=="success") {				var obj:Sprite=new Sprite;				obj.addChild(e.data);				while (obj.width > stage.stageWidth || obj.height > stage.stageHeight) {					obj.width = obj.width * 0.8;					obj.height = obj.height * 0.8;				}				obj.rotation=parseInt(tool_mc.angle_mc.text);				obj.x=100;				addChild(obj);				setChildIndex(tool_mc,numChildren-1);				_info[obj.name+"type"]="图像";				_info[obj.name+"url"]=e.target.getobj("url");				selectObject(obj);				updateTools();			}		}		private function onToolsInputHandler(event : Event) : void		{			var obj=_info["curobj"];			if (obj==null) return;			switch(event.target.name){				case "name_mc":					if (_info[obj.name+"type"]=="文本") {						var txt=event.target.text;						if (txt=="") txt="(空)";						obj.text=txt;					}				break;				case "fontname_mc":				case "fontsize_mc":					updateFont(tool_mc.fontname_mc.text,parseInt(tool_mc.fontsize_mc.text));				break;				case "x_mc":obj.x=parseInt(event.target.text);break;				case "y_mc":obj.y=parseInt(event.target.text);break;				case "w_mc":obj.width=parseInt(event.target.text);break;				case "h_mc":obj.height=parseInt(event.target.text);break;				case "angle_mc":obj.rotation=parseInt(event.target.text);break;				case "alpha_mc":obj.alpha=parseInt(event.target.text)/100.0;break;				case "color_mc":updateColor(event.target.text);break;				case "level_mc":					var idx:int=parseInt(event.target.text);					if (idx>=0 && idx+2<numChildren) {						setChildIndex(obj,idx);						tool_mc.level_mc.text=getChildIndex(obj);					}				break;			}		}		private function onToolsClickHandler(event : MouseEvent) : void		{			var obj=_info["curobj"];			switch(event.target.name){				case "txt_mc":					var txt:TextField = new TextField;					txt.selectable = false;					var format:TextFormat = new TextFormat();					format.font = tool_mc.fontname_mc.text;					format.color = parseInt(tool_mc.color_mc.text, 16);					format.size = parseInt(tool_mc.fontsize_mc.text);					txt.defaultTextFormat = format;					txt.autoSize = "left";					txt.text = tool_mc.name_mc.text==""?"新文本":tool_mc.name_mc.text;					txt.height = txt.getCharBoundaries(0).height;					//txt.rotation=parseInt(tool_mc.angle_mc.text);					txt.x=100;					txt.y=100;					addChild(txt);					setChildIndex(tool_mc,numChildren-1);					_info[txt.name+"color"]=tool_mc.color_mc.text;					_info[txt.name+"fontname"]=tool_mc.fontname_mc.text;					_info[txt.name+"fontsize"]=tool_mc.fontsize_mc.text;					_info[txt.name+"type"]="文本";					selectObject(txt);					updateTools();				break;				case "rect_mc":					var sprite:Sprite = new Sprite;					AS3Utils.drawRect(sprite,0,0,100,100,parseInt(tool_mc.color_mc.text, 16),1);					sprite.rotation=parseInt(tool_mc.angle_mc.text);					sprite.x=100;					sprite.y=100;					addChild(sprite);					setChildIndex(tool_mc,numChildren-1);					_info[sprite.name+"color"]=tool_mc.color_mc.text;					_info[sprite.name+"type"]="矩形";					selectObject(sprite);					updateTools();				break;				case "file_mc":					insertUrlObj("http://i1.sinaimg.cn/ent/s/m/2008-06-26/U2519P28T3D2076413F526DT20080626121034.jpg");				break;				case "getclr_mc":					_info["pickcolor"]=true;					tool_mc.colortable_mc.visible=true;					tool_mc.alpha=1;				break;				case "uplevel_mc":					if (obj && getChildIndex(obj)+2<numChildren) {						setChildIndex(obj,getChildIndex(obj)+1);						tool_mc.level_mc.text=getChildIndex(obj);					}				break;				case "downlevel_mc":					if (obj && getChildIndex(obj)!=0) {						setChildIndex(obj,getChildIndex(obj)-1);						tool_mc.level_mc.text=getChildIndex(obj);					}				break;				case "eraser_mc":					if (obj) {						removeChild(obj);						_info["curmoveobj"]=null;						selectObject(null);						updateTools();					}				break;				case "flip_mc":					if (obj && _info[obj.name+"type"]!="文本") {						obj.rotation+=45;						updateTools();					}				break;			}			trace("onToolsClickHandler:"+event.target.name);		}		private function updateTools():void		{			var obj=_info["curobj"];			if (obj!=null && obj.name == "tool_mc") obj=null;			if (obj==null) {				tool_mc.name_mc.text="";				tool_mc.x_mc.text="";				tool_mc.y_mc.text="";				tool_mc.w_mc.text="";				tool_mc.h_mc.text="";				tool_mc.angle_mc.text="";				//tool_mc.alpha_mc.text="";				//tool_mc.color_mc.text="";				tool_mc.level_mc.text="";			} else {				if (obj is TextField)					tool_mc.name_mc.text=obj.text;				else					tool_mc.name_mc.text=_info[obj.name+"type"];				tool_mc.x_mc.text=obj.x;				tool_mc.y_mc.text=obj.y;				tool_mc.w_mc.text=obj.width;				tool_mc.h_mc.text=obj.height;				tool_mc.angle_mc.text=obj.rotation;				tool_mc.alpha_mc.text=obj.alpha*100;				if (_info[obj.name+"color"]) updateColor(_info[obj.name+"color"],false);				if (_info[obj.name+"fontname"]) updateFont(_info[obj.name+"fontname"],_info[obj.name+"fontsize"],false);				tool_mc.level_mc.text=getChildIndex(obj);			}		}		private function selectObject(object:Object): void		{			if (_info["curobj"]!=null) _info["curobj"].filters=null;			if (object) object.filters=[_broder];			_info["curobj"]=object;		}		private function onMoveHandler(event : MouseEvent) : void		{			var obj;			if (event.type == MouseEvent.MOUSE_DOWN) {				if (_info["pickcolor"]) return;				if (event.target==null || event.target is Stage) {					selectObject(null);					_info["curmoveobj"]=null;					updateTools();					return;				}				obj=event.target;				while(!(obj.parent is wysiwygeditor)) obj = obj.parent;				if (obj.name!=tool_mc.name) {					selectObject(obj);				} else if (event.target.name!=tool_mc.name) {					//mc in tool_mc not need to move					_info["curmoveobj"]=null;					return;				}				_info["curmoveobj"]=obj;				_info[obj.name+"_x"] = event.stageX - obj.x;				_info[obj.name+"_y"] = event.stageY - obj.y;				if (_info["curobj"]!=null) updateTools();				return;			} else if (event.type == MouseEvent.MOUSE_UP) {				if (_info["pickcolor"]) {					_info["pickcolor"]=false;					tool_mc.alpha=0.7;					tool_mc.colortable_mc.visible=false;					updateColor(tool_mc.color_mc.text);				}				_info["curmoveobj"]=null;				return;			}			if (_info["pickcolor"]) {				var mybmp:BitmapData=new BitmapData(stage.stageWidth,stage.stageHeight,false,0);				mybmp.draw(stage);				var argb:String="000000"+mybmp.getPixel32(event.stageX,event.stageY).toString(16).toUpperCase();				var rgb:String=argb.substr(argb.length - 6);				updateColor(rgb,false);			}			obj=_info["curmoveobj"];			if (obj==null) return;			obj.x = event.stageX - _info[obj.name+"_x"];			obj.y = event.stageY - _info[obj.name+"_y"];			updateTools();		}		private function updateColor(rgb:String,bup:Boolean=true) : void		{			tool_mc.color_mc.text=rgb;			var bm:Bitmap=new Bitmap(new BitmapData(20,20,false,parseInt(rgb,16)));			bm.x=102;			bm.y=162;			if (_info["lastbm"]) tool_mc.removeChild(_info["lastbm"]);			tool_mc.addChild(bm);			_info["lastbm"]=bm;			if (bup && _info["curobj"]) {				var obj=_info["curobj"];				switch(_info[obj.name+"type"]) {					case "矩形":						AS3Utils.drawRect(obj,0,0,100,100,parseInt(tool_mc.color_mc.text, 16),1);					break;					case "文本":						var format:TextFormat = new TextFormat();						format.font = "宋体";						format.color = parseInt(tool_mc.color_mc.text, 16);						format.size = 10;						obj.defaultTextFormat = format;						obj.text = obj.text;					break;					default:						return;				}				_info[obj.name+"color"]=tool_mc.color_mc.text;			}		}		private function updateFont(fontname:String,fontsize:Number,bup:Boolean=true):void		{			tool_mc.fontname_mc.text=fontname;			tool_mc.fontsize_mc.text=fontsize;			if (bup && _info["curobj"]) {				var obj=_info["curobj"];				if (_info[obj.name+"type"]=="文本") {					var format:TextFormat = new TextFormat();					format.font = fontname;					format.color = parseInt(tool_mc.color_mc.text, 16);					format.size = fontsize;					obj.defaultTextFormat = format;					obj.text = obj.text;					_info[obj.name+"fontname"]=tool_mc.fontname_mc.text;					_info[obj.name+"fontsize"]=tool_mc.fontsize_mc.text;				}			}		}		private function onResizeHandler(event : Event) : void {}	}}