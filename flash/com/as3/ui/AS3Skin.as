/*	皮肤类		通过load加载皮肤，skin为String是皮肤文件url，否则为直接可用的皮肤对象		通过响应消息EVENT_SKINSTATE loadinfo或重载loadResult设置皮肤元素的布局和排列		调用resize进行窗口大小改变重绘		通过setObjectState设置对象是否可见和只读（按钮）		通过setObjectRule设置对象生效的排列方式，详见m排序		通过setText设置文本内容		通过setSliderProgress设置进度条状态		外部外接响应事件：			EVENT_SKINSTATE	皮肤相关信息				loadinfo 加载信息			AS3Event.BUTTON_CLICK 按键信息			AS3Event.SLIDER_SEEK 拖动信息			AS3Event.SLIDER_PREVIEW 拖动预览信息		通过重载btnHandler处理按钮信息		通过重载sliderHandler处理进度条信息	barrytan<20962493@qq.com>*/package com.as3.ui{	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldType;	import flash.text.TextFieldAutoSize;	import flash.display.InteractiveObject;	import flash.net.LocalConnection;	import com.as3.ui.AS3MouseTip;	import com.as3.utils.AS3Event;	import com.as3.net.urlloader.AS3URLLoader;	public class AS3Skin extends Object	{		public static const EVENT_SKINSTATE = "skinstate";		public static const STATE_NORMAL = 0x0;		public static const STATE_INVISIABLE = 0x1;		public static const STATE_DISABLE = 0x2;		protected var _p:Sprite;		protected var _w:int=0;		protected var _h:int=0;		protected var _skinobj=null;//skin obj(ext flash or int flash)		protected var _skinchlid:Object=null;//skin object added to chlid		protected var _skinpos:Object=null;//skin object position define		protected var _skinstate:Object=null;//skin object current state		public function AS3Skin(obj:Object)		{			super();			init(obj);		}		public function init(obj:Object):void		{			_p=obj.parent;			_skinstate=new Object();		}		//skin as String,load skin from url,skin as Sprite internal skin object		public function load(skin:*):void		{			free();			_skinchlid=new Object();			_skinpos=new Object();			if (skin is String)				new AS3URLLoader().load(10,loadHandler,skin,"media");			else {				_skinobj=skin;				loadResult("success");			}		}		protected function loadHandler(e : *) : void		{			if (e.info=="success") {				try{_skinobj=e.data;}				catch(e:*){_skinobj=null;e.info="catched";}			}			loadResult(e.info);		}		protected function loadResult(info:String):void		{			//check if the skin have setSkinThings script			if (info=="success") {				try{_skinobj.setSkinThings(this);}				catch(e:*){}			}			_p.dispatchEvent(new AS3Event(EVENT_SKINSTATE,"loadinfo",info));			//if (info=="success") resize(_w,_h);		}		public function free():void		{			for(var key in _skinchlid) {				if (_skinstate[key+"er"]==undefined)					_p.removeChild(_skinchlid[key]);			}			_skinobj=null;			_skinchlid=null;			_skinpos=null;			try{				new LocalConnection().connect("MemoryRecycled");				new LocalConnection().connect("MemoryRecycled");			} catch (e:*){}		}		public function resize(w:int, h:int):void		{			_w=w;			_h=h;			for(var btnkey in _skinpos){				var obj=_skinchlid[btnkey];				if (obj!=undefined)					moveObj(obj,_skinpos[btnkey],btnkey);			}		}		//x按右边距确定元件坐标（左边距初始化确定即可）		//cx按右边距确定元件宽度		//mx按中心点设置元件坐标		//hx当w小于该值时元素隐藏，否则显示		//z元件为自定义元件，调用元件的resize方法，z储存的如果是对象，先用obj的cx，cy处理一遍w,h，key+si储存元件的额外信息		//m元件有多个排列规则，需要通过key+st判断当前是在什么状态		protected function moveObj(obj:Object,rule:Object,key:String) : void{			var len:*;			for(var pos in rule){				len=rule[pos];				if (pos=="m") moveObj(obj,len[_skinstate[key+"st"]],key);				else {					if (obj.x>-10000 && obj.y>-10000) {						if (pos=="x") obj.x=_w+len;						else if (pos=="y") obj.y=_h+len;						else if (pos=="cx") obj.width=_w+len-obj.x;						else if (pos=="cy") obj.height=_h+len-obj.y;						else if (pos=="mx") obj.x=(_w-obj.width)/2;						else if (pos=="my") obj.y=(_h-obj.height)/2;						else if (pos=="z") {							var w:int=_w,h:int=_h;							if (!(len is Number)) {								if (len["cx"]!=undefined) w=w+len["cx"]-obj.x;								if (len["cy"]!=undefined) h=h+len["cy"]-obj.y;							}							obj.resize(w,h,_skinstate[key+"si"]);						}						//warning cx and x can not specified at the same time					}					if (pos=="hx") {						if (_w>=len && obj.x<=-10000) {							obj.x=-obj.x-10000;							//确保刷新按钮的所有属性，确保正确显示							moveObj(obj,rule,key);						}						if (_w<len && obj.x>-10000) obj.x=-10000-obj.x;					} else if (pos=="hy") {						if (_h>=len && obj.y<=-10000) {							obj.y=-obj.y-10000;							//确保刷新按钮的所有属性，确保正确显示							moveObj(obj,rule,key);						}						if (_h<len && obj.y>-10000) obj.y=-10000-obj.y;					}				}			}		}		protected function btnHandler(e:AS3Event) :void		{			_p.dispatchEvent(new AS3Event(e.type,e.obj.id,e.obj.info));			//trace(e.type+","+e.obj.type);		}		protected function sliderHandler(e:AS3Event):void		{			_skinstate[e.obj.id+"si"]["pos"]=e.obj.info;			_p.dispatchEvent(new AS3Event(e.type,e.obj.id,e.obj.info));			//trace("evt:"+e.type+",id:"+e.obj.type+",info:"+e.obj.info);		}		public function addObject(obj:*,key:String,rule:Object,x:int=-1,y:int=-1,autofree:Boolean=true,si:Object=null):void		{			if (autofree) _p.addChild(obj);			else _skinstate[key+"er"]=true;			_skinchlid[key]=obj;			var state=_skinstate[key];			if (state==undefined) {				_skinstate[key]=0;				state=0;			}			if (obj is AS3Button)				obj.enabled = (state & STATE_DISABLE) == 0;			obj.visible = (state & STATE_INVISIABLE) == 0;			_skinpos[key]=rule;			if (rule['m']!=undefined && _skinstate[key+"st"]==undefined) _skinstate[key+"st"]=0;			if (si!=null && _skinstate[key+"si"]==undefined) _skinstate[key+"si"]=si;			if (obj!=null) {				if (x!=-1) obj.x=x;				if (y!=-1) obj.y=y;			}		}		public function addStatic(key:String,rule:Object,x:int=-1,y:int=-1) : void		{			var obj=_skinobj[key];			if (obj==undefined) trace("load "+key+" failed");			addObject(obj,key,rule,x,y);		}		public function addText(key:String,rule:Object,x:int=-1,y:int=-1,color:int=0xffffff,font:String="宋体",size:int=12):void		{			var txt:TextField = new TextField;			txt.selectable = false;			if (_skinstate[key+"ti"]==undefined) _skinstate[key+"ti"]="";			txt.height = 20;			var format:TextFormat = new TextFormat();			format.font = font;			format.color = color;			format.size = size;			txt.defaultTextFormat = format;			txt.autoSize = TextFieldAutoSize.LEFT;			addObject(txt,key,rule,x,y);			txt.text = _skinstate[key+"ti"];		}		public function addInputText(key:String,rule:Object,x:int=-1,y:int=-1,color:int=0xffffff,									 font:String="宋体",size:int=12,width:int=100):void		{			var txt:TextField = new TextField;			txt.selectable = true;			txt.type = TextFieldType.INPUT;			if (_skinstate[key+"ti"]==undefined) _skinstate[key+"ti"]="";			txt.width = width;			txt.height = 20;			var format:TextFormat = new TextFormat();			format.font = font;			format.color = color;			format.size = size;			txt.defaultTextFormat = format;			txt.autoSize = TextFieldAutoSize.NONE;			addObject(txt,key,rule,x,y);			txt.text = _skinstate[key+"ti"];		}		public function addButton(btnkey:String,rule:Object,x:int=-1,y:int=-1) : void		{			if (_skinobj[btnkey]==undefined) trace("load "+btnkey+" failed");			var obj=new AS3Button({id:btnkey, label:"", tip:null, mouseTip:null, skin:_skinobj[btnkey]});			obj.addEventListener(AS3Event.BUTTON_CLICK,btnHandler);			addObject(obj,btnkey,rule,x,y);		}		//margin 表示可拉区域离两边的距离		//元件要求，bk_mc为底图必须有，其他都不需要指定，pt_mc为拖动点，left_mc为拖动点左边的进度 mid_mc为额外的右进度（如播放进度） right_mc为右进度（如缓冲进度）		//rule中不要应用cx，cy等会改变元件size的方法，因为这样会影响到里面的所有元素一起变形了，使用函数最后的cx，cy进行设置		public function addSlider(key:String,rule:Object,x:int=-1,y:int=-1,margin:int=5,horizontal:Boolean=true,cx:int=-1,cy:int=-1):void		{			if (_skinobj[key]==undefined) trace("load "+key+" failed");			var obj=new AS3Slider({id:key, margin:margin, horizontal:horizontal,								  cx:cx, cy:cy, skin:_skinobj[key]});			obj.addEventListener(AS3Event.SLIDER_SEEK,sliderHandler);			obj.addEventListener(AS3Event.SLIDER_PREVIEW,sliderHandler);			addObject(obj,key,rule,x,y);			if (_skinstate[key+"si"]==undefined) _skinstate[key+"si"]=new Object();			if (_skinstate[key+"si"]["pos"]==undefined) _skinstate[key+"si"]["pos"]=0;			if (_skinstate[key+"si"]["buf"]==undefined) _skinstate[key+"si"]["buf"]=0;		}		public function setObjectState(key:String,state:int):void		{			_skinstate[key]=state;			if (_skinchlid==null) return;			var obj=_skinchlid[key];			if (obj==undefined) return;			if (obj is AS3Button)				obj.enabled = (state & STATE_DISABLE) == 0;			obj.visible = (state & STATE_INVISIABLE) == 0;		}		public function setObjectRule(key:String,rule:int):void		{			_skinstate[key+"st"]=rule;			if (_skinchlid==null) return;			var obj=_skinchlid[key];			if (obj==undefined) return;			moveObj(obj,_skinpos[key],key);		}		public function setText(key:String,txt:String) : void		{			_skinstate[key+"ti"]=txt;			if (_skinchlid==null) return;			var obj=_skinchlid[key];			if (obj==undefined) return;			obj.text=txt;		}		public function getText(key:String) : String		{			var txt:String=null;			if (_skinchlid!=null) {				var obj=_skinchlid[key];				if (obj!=undefined) txt = obj.text;			}			if (txt==null) txt=_skinstate[key+"ti"];			else _skinstate[key+"ti"]=txt;			return txt==null?"":txt;		}		public function setSliderProgress(key:String,pos:Number,buf:Number)		{			if (_skinstate[key+"si"]==undefined) _skinstate[key+"si"]=new Object();			if (_skinstate[key+"si"]["pos"]==undefined) _skinstate[key+"si"]["pos"]=0;			if (_skinstate[key+"si"]["buf"]==undefined) _skinstate[key+"si"]["buf"]=0;			if (pos!=-1) _skinstate[key+"si"]["pos"]=pos;			if (buf!=-1) _skinstate[key+"si"]["buf"]=buf;			if (_skinchlid==null) return;			var obj=_skinchlid[key];			if (obj==undefined) return;			obj.resize(_w,_h,_skinstate[key+"si"]);		}		public function getSliderProgress(key:String,pos:String="pos"):Number		{			if (_skinstate[key+"si"]==undefined) return 0;			if (_skinstate[key+"si"][pos]==undefined) return 0;			return _skinstate[key+"si"][pos];		}		//注意该函数需要皮肤加载好后设置		public function getObject(key:String):*		{			if (_skinchlid==null) return undefined;			return _skinchlid[key];		}		public function addObjectEventListener(key:String,type:String,fn:Function):Boolean		{			var obj:*=getObject(key);			if (obj==undefined) return false;			obj.addEventListener(type,fn);			return true;		}	}}