// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "THFlash.h"

/////////////////////////////////////////////////////////////////////////////
// CShockwaveflash1

IMPLEMENT_DYNCREATE(THFlash, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CShockwaveflash1 properties

/////////////////////////////////////////////////////////////////////////////
// CShockwaveflash1 operations
BEGIN_MESSAGE_MAP(THFlash, CWnd)
	ON_WM_RBUTTONDOWN()
	ON_WM_SETCURSOR()
	ON_WM_LBUTTONDOWN()
	ON_WM_SIZE()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_CHAR()
	ON_WM_SETFOCUS()
END_MESSAGE_MAP()

void THFlash::OnRButtonDown(UINT nFlags, CPoint point)
{
	//disable right click to show flash menu
	//CWnd::OnRButtonDown(nFlags, point);
	if (m_nNcRightClickMsg)
	{
		ClientToScreen(&point);
		GetParent()->PostMessage(m_nNcRightClickMsg,point.x,point.y);
	}
}

BOOL THFlash::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message)
{
	// TODO: Add your message handler code here and/or call default
	CRect rect;
	GetWindowRect(&rect);
	POINT pt;
	GetCursorPos(&pt);
	LPCTSTR cur=IDC_ARROW;
	if (rect.PtInRect(pt))
	{
		if (pt.y<rect.top+10)
		{
			if (pt.x<rect.left+10)
				cur=IDC_SIZENWSE;//topleft
			else if (pt.x>rect.right-10)
				cur=IDC_SIZENESW;//topright
			else if (pt.y<rect.top+5)
				cur=IDC_SIZENS;//top
		}
		else if (pt.y>rect.bottom-10)
		{
			if (pt.x<rect.left+10)
				cur=IDC_SIZENESW;//bottomleft
			else if (pt.x>rect.right-10)
				cur=IDC_SIZENWSE;//bottomright
			else if (pt.y>rect.bottom-5)
				cur=IDC_SIZENS;//bottom
		}
		else if (pt.x<rect.left+5)
			cur=IDC_SIZEWE;//left
		else if (pt.x>rect.right-5)
			cur=IDC_SIZEWE;//right
		//title height
//		else if (pt.y <= rect.left+m_titleheight)
//			cur=IDC_ARROW;
	}
	//pass the message
	ScreenToClient(&pt);
	if (m_rect.IsControlRect(pt.x,pt.y)) cur=IDC_ARROW;
	if (cur==IDC_ARROW || m_bHaveSizeArrow==FALSE) return CWnd::OnSetCursor(pWnd, nHitTest, message);
	SetCursor(AfxGetApp()->LoadStandardCursor(cur));
	return TRUE;
}

void THFlash::OnLButtonDblClk(UINT nFlags, CPoint pt)
{
	if (m_nNcDblClickMsg)
	{
		ClientToScreen(&pt);
		GetParent()->PostMessage(m_nNcDblClickMsg,pt.x,pt.y);
	}
	else
		CWnd::OnLButtonDblClk(nFlags, pt);
}

void THFlash::OnLButtonDown(UINT nFlags, CPoint pt)
{
	if (!ParseNcMessage(nFlags,pt))
		CWnd::OnLButtonDown(nFlags, pt);
}

BOOL THFlash::ParseNcMessage(UINT nFlags, CPoint pt)
{
	// TODO: Add your message handler code here and/or call default
	CRect rect;
	GetClientRect(&rect);
	UINT cur=0;
	if (rect.PtInRect(pt))
	{
		if (pt.y<rect.top+10)
		{
			if (pt.x<rect.left+10)
				cur=HTTOPLEFT;//topleft
			else if (pt.x>rect.right-10)
				cur=HTTOPRIGHT;//topright
			else if (pt.y<rect.top+5)
				cur=HTTOP;//top
		}
		else if (pt.y>rect.bottom-10)
		{
			if (pt.x<rect.left+10)
				cur=HTBOTTOMLEFT;//bottomleft
			else if (pt.x>rect.right-10)
				cur=HTBOTTOMRIGHT;//bottomright
			else if (pt.y>rect.bottom-5)
				cur=HTBOTTOM;//bottom
		}
		else if (pt.x<rect.left+5)
			cur=HTLEFT;//left
		else if (pt.x>rect.right-5)
			cur=HTRIGHT;//right
		if (m_bHaveSizeArrow==FALSE) cur=0;
		//title height
		if (cur== 0 && (pt.y <= rect.left+m_nTitleHeight || m_nTitleHeight==-1))
			cur=HTCAPTION;
	}
	if (m_rect.IsControlRect(pt.x,pt.y)) cur=0;
	if (cur!=0)
	{
		GetParent()->SendMessage(WM_NCLBUTTONDOWN,cur,NULL);
		return TRUE;
	}
	return FALSE;
}

void THFlash::OnSize(UINT nType, int cx, int cy)
{
	CWnd::OnSize(nType, cx, cy);
	m_rect.OnSize(cx,cy);
}

void THFlash::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	//if (nChar==' ')
	//	CallFunctionEx1(_T("OnKeyPress"),_T("Space"));
	CWnd::OnChar(nChar, nRepCnt, nFlags);
}

void THFlash::OnSetFocus(CWnd* pOldWnd)
{
	//disable setfocus message for disable the yellow focus rect in flash.
	//CWnd::OnSetFocus(pOldWnd);
}
